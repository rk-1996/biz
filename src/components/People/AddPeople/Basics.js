import React, { useState, useEffect } from "react";
import {
  Form,
  Input,
  DatePicker,
  Row,
  Col,
  Checkbox,
  Button,
  Select,
  Icon,
  message
} from "antd";
import { withRouter } from "react-router-dom";
import stateList from "./../../../util/State";
import { getValidPin } from './../../../services/people';
var randomize = require('randomatic');
const FormItem = Form.Item;
const { Option } = Select;

const Basics = (props) => {
  const [isEmergency, setIsEmergency] = useState(true);
  const { onCompleteDetail, setFormTab, token, activeLocation, activeCompany, checkedValidPin, autoGeneratedPin, autoGeneratePinFun } = props;
  const { getFieldDecorator, setFieldsValue } = props.form;
  // console.log(getFieldDecorator)
  console.log(autoGeneratedPin)

  const handleSubmit = (e) => {
    e.preventDefault();
    props.form.validateFields(async (err, values) => {
      if (!err) {
        let dataObj = {
          company: activeCompany,
          location: activeLocation,
          pin: values.userPin1
        }
        const result = await getValidPin(token, dataObj);
        if (result.status !== 200) {
          message.error('This pin is not unique you have to add unique pin!')
          return
        }
        console.log("values", values);
        onCompleteDetail({ ...values }, 'step1');
        setFormTab("2");
      }
    });
  };

  // useEffect(() => {
  //   setFieldsValue({
  //     userPin1: 123
  //   })
  // }, [])



  // useEffect(() => {
  //   console.log("pin caleed", autoGeneratedPin)
  //   setFieldsValue({
  //     userPin1: autoGeneratedPin
  //   })
  // }, [autoGeneratedPin, setFieldsValue])



  const autoGeneratePin = (e) => {
    e.preventDefault()
    let generatedPin = randomize('0', 4);
    console.log(generatedPin)
    setFieldsValue({
      userPin1: generatedPin
    })
    // autoGeneratePinFun()
  }

  return (
    <Form onSubmit={handleSubmit} className="gx-form-row0">
      <Row>
        <Col span={8} xs={24} md={8}>
          <FormItem label="First Name" className="display-block">
            {getFieldDecorator("firstName", {
              rules: [{ required: true, message: "Please input first name!" }],
            })(<Input placeholder="First Name" />)}
          </FormItem>
        </Col>
        <Col span={8} xs={24} md={8}>
          <FormItem label="Middle Name" className="display-block">
            {getFieldDecorator("middleName")(<Input type="text" placeholder="Phone Number" />)}
          </FormItem>
        </Col>
        <Col span={8} xs={24} md={8}>
          <FormItem label="Last Name" className="display-block">
            {getFieldDecorator("lastName", {
              rules: [{ required: true, message: "Please input last name!" }],
            })(<Input type="text" placeholder="Last Name" />)}
          </FormItem>
        </Col>
        <Col span={8} xs={24} md={8}>
          <FormItem label="Phone Number" className="display-block">
            {getFieldDecorator("phone", {
              rules: [
                { min: 10, message: "Min length 10 is required!" },
                { max: 10, message: "Max length 10 is required!" },
                { required: true, message: "Please input phone number!" },
              ],
            })(<Input type="text" placeholder="Phone Number" />)}
          </FormItem>
        </Col>
        <Col span={8} xs={24} md={8}>
          <FormItem label="Date of birth" className="display-block">
            {getFieldDecorator("dob", {
              rules: [{ required: true, message: "Please input birthdate!" }],
            })(<DatePicker style={{ width: "100%" }} />)}
          </FormItem>
        </Col>
        <Col span={8} xs={24} md={8}>
          <FormItem
            label="Social Security Number"
            className="display-block"
          >
            {getFieldDecorator("ssn", {
              rules: [
                { min: 9, message: "Min length 9 is required!" },
                { max: 9, message: "Max length 9 is required!" },
                { required: true, message: "Please input SSN!" },
              ],
            })(<Input placeholder="Social Security Number" />)}
          </FormItem>
        </Col>
        <Col span={24} xs={24} md={24} className="gx-pt-3 gx-pb-1">
          Address:
        </Col>
        <Col span={24} className="gx-p-0">
          <Row>
            <Col span={12} xs={24} md={12}>
              <FormItem label="Street 1" className="display-block">
                {getFieldDecorator("street1", {
                  rules: [
                    {
                      required: true,
                      message: "Please input your address street1!",
                    },
                  ],
                })(<Input type="text" placeholder="Street 1" />)}
              </FormItem>
            </Col>
            <Col span={12} xs={24} md={12}>
              <FormItem label="Street 2" className="display-block">
                {getFieldDecorator("street2")(
                  <Input type="text" placeholder="Street 2" />
                )}
              </FormItem>
            </Col>
            <Col span={8} xs={24} md={8}>
              <FormItem label="City" className="display-block">
                {getFieldDecorator("city", {
                  rules: [
                    { required: true, message: "Please input your city!" },
                  ],
                })(<Input type="text" placeholder="City" />)}
              </FormItem>
            </Col>
            <Col span={8} xs={24} md={8}>
              <FormItem label="State" className="display-block">
                {getFieldDecorator("state", {
                  rules: [
                    { required: true, message: "Please select your state!" },
                  ],
                })(
                  <Select
                    showSearch
                    style={{ width: "100%" }}
                    placeholder="State"
                  >
                    {stateList.map((s, i) => {
                      return (
                        <Option key={i} value={s.abbreviation}>
                          {s.abbreviation}
                        </Option>
                      );
                    })}
                  </Select>
                )}
              </FormItem>
            </Col>
            <Col span={8} xs={24} md={8}>
              <FormItem label="Zip" className="display-block">
                {getFieldDecorator("zip", {
                  rules: [
                    { min: 5, message: "Min length 5 is required!" },
                    { max: 5, message: "Max length 5 is required!" },
                    { required: true, message: "Please input your zip!" },
                  ],
                })(<Input type="text" placeholder="Zip" />)}
              </FormItem>
            </Col>
            <Col span={8} xs={24} md={8}>
              <FormItem label="Email" className="display-block">
                {getFieldDecorator("email", {
                  rules: [{ required: true, message: "Please input email!" }],
                })(<Input type="text" placeholder="Email" />)}
              </FormItem>
            </Col>
            <Col span={8} xs={24} md={8}>
              <FormItem label="Pin" className="auto-generate-pin-main display-block">
                {getFieldDecorator("userPin1", {
                  rules: [{ min: 4, message: "Min length 4 is required!" },
                  { max: 4, message: "Max length 4 is required!" }, { required: true, message: "Please input pin" }],
                })(<Input type="text" placeholder="Pin" />)}
                {/* <Icon className='ml-15px font-size-22px' onClick={(e) => { (autoGeneratePin(e)) }} type="clock-circle" /> */}
                <Icon className='ml-15px font-size-22px' onClick={(e) => { (autoGeneratePin(e)) }} type="redo" />
              </FormItem>
            </Col>
          </Row>
        </Col>
        <Col span={24}>
          <Form.Item>
            <Checkbox
              checked={isEmergency}
              onChange={(e) => setIsEmergency(e.target.checked)}
            >
              Have Employee enter Emergency Contact Information
            </Checkbox>
          </Form.Item>
        </Col>
        {!isEmergency && (
          <Col span={24} className="gx-p-0">
            <Row>
              <Col span={8} xs={24} md={8}>
                <FormItem label="Full Name" className="display-block">
                  {getFieldDecorator("emergencyFullName", {
                    rules: [
                      { required: true, message: "Please input full name!" },
                    ],
                  })(<Input placeholder="Full Name" />)}
                </FormItem>
              </Col>
              <Col span={8} xs={24} md={8}>
                <FormItem label="Relationship" className="display-block">
                  {getFieldDecorator("emergencyRelationship", {
                    rules: [
                      { required: true, message: "Please input relationship!" },
                    ],
                  })(<Input placeholder="Relationship" />)}
                </FormItem>
              </Col>
              <Col span={8} xs={24} md={8}>
                <FormItem label="Phone Number" className="display-block">
                  {getFieldDecorator("emergencyPhone", {
                    rules: [
                      { min: 10, message: "Min length 10 is required!" },
                      { max: 10, message: "Max length 10 is required!" },
                      { required: true, message: "Please input phone number!" },
                    ],
                  })(<Input placeholder="Phone Number" />)}
                </FormItem>
              </Col>
              <Col span={8} xs={24} md={8}>
                <FormItem label="Email" className="display-block">
                  {getFieldDecorator("emergencyEmail", {
                    rules: [{ required: true, message: "Please input email!" }],
                  })(<Input placeholder="Email" />)}
                </FormItem>
              </Col>
            </Row>
          </Col>
        )}
      </Row>
      <div className="flex-x center gx-pt-2">
        <FormItem>
          <Button
            type="secondary"
            className="login-form-button"
            onClick={() => props.history.push("/people")}
          >
            Back
          </Button>
          <Button
            type="primary"
            htmlType="submit"
            className="login-form-button"
          >
            Continue
          </Button>
        </FormItem>
      </div>
    </Form>
  );
};

const WrappedModal = Form.create()(Basics);
export default withRouter(WrappedModal);
